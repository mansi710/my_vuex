{"ast":null,"code":"// import shop from \"@/store/shop\";\n// import store from \"@/store/store\";\nimport { mapState, mapGetters, mapActions } from \"vuex\";\nexport default {\n  data() {\n    return {\n      // products: [],\n      loading: false,\n      productIndex: 1\n    };\n  },\n\n  computed: { ...mapState({\n      products: state => state.products.items\n    }),\n    ...mapGetters({\n      productIsInStock: \"productIsInStock\"\n    })\n  },\n  //  computed: {\n  //   //return the product from the state.\n  //   products() {\n  //     // return store.state.products;\n  //     // for available product to fetch getter\n  //     // return store.getters.availableProducts;\n  //     //using getter\n  //     return this.$store.state.products;\n  //   },\n  //   productIsInStock() {\n  //     return this.$store.getters.productIsInStock;\n  //   },\n  // },\n  methods: { ...mapActions(\"products\", {\n      addProductToCart: \"addProductToCart\",\n      fetchProducts\n    }) // addProductToCart(product) {\n    //   store.dispatch(\"addProductToCart\", product);\n    // },\n\n  },\n\n  created() {\n    // shop.getProducts((products) => {\n    //   //   store.state.products = products;\n    //   //commit mutation\n    //   store.commit(\"setProducts\", products);\n    // });\n    this.loading = true; // store.dispatch(\"fetchProducts\").then(() => (this.loading = false));\n\n    this.fetchProducts().then(() => this.loading = false);\n  }\n\n};","map":{"version":3,"mappings":"AAgBA;AACA;AACA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,UAA/B,QAAiD,MAAjD;AACA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACL;MACAC,OAAO,EAAE,KAFJ;MAGLC,YAAY,EAAE;IAHT,CAAP;EAKD,CAPY;;EASbC,QAAQ,EAAE,EACR,GAAGN,QAAQ,CAAC;MACVO,QAAQ,EAAGC,KAAD,IAAWA,KAAK,CAACD,QAAN,CAAeE;IAD1B,CAAD,CADH;IAIR,GAAGR,UAAU,CAAC;MACZS,gBAAgB,EAAE;IADN,CAAD;EAJL,CATG;EAkBb;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACAC,OAAO,EAAE,EACP,GAAGT,UAAU,CAAC,UAAD,EAAa;MACxBU,gBAAgB,EAAE,kBADM;MAExBC;IAFwB,CAAb,CADN,CAKP;IACA;IACA;;EAPO,CAlCI;;EA2CbC,OAAO,GAAG;IACR;IACA;IACA;IACA;IACA;IAEA,KAAKV,OAAL,GAAe,IAAf,CAPQ,CAQR;;IACA,KAAKS,aAAL,GAAqBE,IAArB,CAA0B,MAAO,KAAKX,OAAL,GAAe,KAAhD;EACD;;AArDY,CAAf","names":["mapState","mapGetters","mapActions","data","loading","productIndex","computed","products","state","items","productIsInStock","methods","addProductToCart","fetchProducts","created","then"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/vuex/src/components/ProductList.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Product List</h1>\n    <img v-if=\"loading\" src=\"https://i.imgur.com/JfPpwOA.gif\" />\n    <ul v-else>\n      <li v-for=\"product in products\" :key=\"product.name\">\n        {{ product.title }} - {{ product.price }} - {{ product.inventory }}\n        <button :disabled=\"!productIsInStock(product)\" @click=\"addProductToCart(product)\">\n          Add To Cart\n        </button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n// import shop from \"@/store/shop\";\n// import store from \"@/store/store\";\nimport { mapState, mapGetters, mapActions } from \"vuex\";\nexport default {\n  data() {\n    return {\n      // products: [],\n      loading: false,\n      productIndex: 1,\n    };\n  },\n\n  computed: {\n    ...mapState({\n      products: (state) => state.products.items,\n    }),\n    ...mapGetters({\n      productIsInStock: \"productIsInStock\",\n    }),\n  },\n\n  //  computed: {\n  //   //return the product from the state.\n  //   products() {\n  //     // return store.state.products;\n\n  //     // for available product to fetch getter\n  //     // return store.getters.availableProducts;\n\n  //     //using getter\n  //     return this.$store.state.products;\n  //   },\n\n  //   productIsInStock() {\n  //     return this.$store.getters.productIsInStock;\n  //   },\n  // },\n  methods: {\n    ...mapActions(\"products\", {\n      addProductToCart: \"addProductToCart\",\n      fetchProducts,\n    }),\n    // addProductToCart(product) {\n    //   store.dispatch(\"addProductToCart\", product);\n    // },\n  },\n  created() {\n    // shop.getProducts((products) => {\n    //   //   store.state.products = products;\n    //   //commit mutation\n    //   store.commit(\"setProducts\", products);\n    // });\n\n    this.loading = true;\n    // store.dispatch(\"fetchProducts\").then(() => (this.loading = false));\n    this.fetchProducts().then(() => (this.loading = false));\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}