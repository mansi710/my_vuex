{"ast":null,"code":"// import { resolve } from \"core-js/fn/promise\";\nimport { createStore } from \"vuex\"; // import store from \"./store\";\n\nimport shop from \"./shop\";\nexport default createStore({\n  state: {\n    //like data\n    products: [],\n    cart: []\n  },\n  getters: {\n    //like computed properties\n    productsCount() {},\n\n    availableProducts(state) {\n      return state.products.filter(product => product.inventory > 0);\n    }\n\n  },\n  actions: {\n    //make the ajax call\n    //run setProducts mutation\n    // fetchProducts({ commit }) {\n    //   return new Promise((resolve) => {\n    //     shop.getProducts((products) => {\n    //       commit(\"setProducts\", products);\n    //       resolve();\n    //     });\n    //   });\n    // },\n    fetchProducts(context) {\n      shop.getProducts(products => {\n        context.commit(\"setProducts\", products);\n      });\n    },\n\n    addProductToCart(context, product) {\n      if (product.inventory > 0) {\n        //find cartItem\n        const cartItem = context.state.cart.find(item => item.id === product.id);\n\n        if (!cartItem) {\n          //pushProductToCart\n          context.commit(\"pushProductToCart\", product.id);\n        } else {\n          //incrementItemQuantity\n          context.commit(\"incrementItemQuantity\", cartItem);\n        }\n\n        context.commit(\"decrementProductInventory\", product);\n      }\n    }\n\n  },\n  mutations: {\n    //setting and updating state\n    //when state change\n    //and only responsible for updating just a piece of the state.\n    setProducts(state, products) {\n      state.products = products;\n    },\n\n    pushProductToCart(state, productId) {\n      state.cart.push({\n        id: productId,\n        quantity: 1\n      });\n    },\n\n    incrementItemQuantity(state, cartItem) {\n      cartItem.quantity++;\n    },\n\n    decrementProductInventory(state, product) {\n      product.inventory--;\n    }\n\n  }\n});","map":{"version":3,"names":["createStore","shop","state","products","cart","getters","productsCount","availableProducts","filter","product","inventory","actions","fetchProducts","context","getProducts","commit","addProductToCart","cartItem","find","item","id","mutations","setProducts","pushProductToCart","productId","push","quantity","incrementItemQuantity","decrementProductInventory"],"sources":["/var/www/html/newData/mansi/vuex/src/store/shoppingcart.js"],"sourcesContent":["// import { resolve } from \"core-js/fn/promise\";\nimport { createStore } from \"vuex\";\n// import store from \"./store\";\nimport shop from \"./shop\";\nexport default createStore({\n  state: {\n    //like data\n    products: [],\n    cart:[]\n  },\n  getters: {\n    //like computed properties\n    productsCount() {},\n    availableProducts(state) {\n      return state.products.filter((product) => product.inventory > 0);\n    },\n  },\n  actions: {\n    //make the ajax call\n    //run setProducts mutation\n    // fetchProducts({ commit }) {\n    //   return new Promise((resolve) => {\n    //     shop.getProducts((products) => {\n    //       commit(\"setProducts\", products);\n    //       resolve();\n    //     });\n    //   });\n    // },\n\n    fetchProducts(context) {\n      shop.getProducts((products) => {\n        context.commit(\"setProducts\", products);\n      });\n    },\n\n    addProductToCart(context, product) {\n      if (product.inventory > 0) {\n        //find cartItem\n        const cartItem = context.state.cart.find(\n          (item) => item.id === product.id\n        );\n        if (!cartItem) {\n          //pushProductToCart\n          context.commit(\"pushProductToCart\", product.id);\n        } else {\n          //incrementItemQuantity\n          context.commit(\"incrementItemQuantity\", cartItem);\n        }\n        context.commit(\"decrementProductInventory\", product);\n      }\n    },\n  },\n  mutations: {\n    //setting and updating state\n    //when state change\n    //and only responsible for updating just a piece of the state.\n    setProducts(state, products) {\n      state.products = products;\n    },\n    pushProductToCart(state, productId) {\n      state.cart.push({\n        id: productId,\n        quantity: 1,\n      });\n    },\n\n    incrementItemQuantity(state, cartItem) {\n      cartItem.quantity++;\n    },\n\n    decrementProductInventory(state, product) {\n      product.inventory--;\n    },\n  },\n});\n"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,MAA5B,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACL;IACAC,QAAQ,EAAE,EAFL;IAGLC,IAAI,EAAC;EAHA,CADkB;EAMzBC,OAAO,EAAE;IACP;IACAC,aAAa,GAAG,CAAE,CAFX;;IAGPC,iBAAiB,CAACL,KAAD,EAAQ;MACvB,OAAOA,KAAK,CAACC,QAAN,CAAeK,MAAf,CAAuBC,OAAD,IAAaA,OAAO,CAACC,SAAR,GAAoB,CAAvD,CAAP;IACD;;EALM,CANgB;EAazBC,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEAC,aAAa,CAACC,OAAD,EAAU;MACrBZ,IAAI,CAACa,WAAL,CAAkBX,QAAD,IAAc;QAC7BU,OAAO,CAACE,MAAR,CAAe,aAAf,EAA8BZ,QAA9B;MACD,CAFD;IAGD,CAhBM;;IAkBPa,gBAAgB,CAACH,OAAD,EAAUJ,OAAV,EAAmB;MACjC,IAAIA,OAAO,CAACC,SAAR,GAAoB,CAAxB,EAA2B;QACzB;QACA,MAAMO,QAAQ,GAAGJ,OAAO,CAACX,KAAR,CAAcE,IAAd,CAAmBc,IAAnB,CACdC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYX,OAAO,CAACW,EADf,CAAjB;;QAGA,IAAI,CAACH,QAAL,EAAe;UACb;UACAJ,OAAO,CAACE,MAAR,CAAe,mBAAf,EAAoCN,OAAO,CAACW,EAA5C;QACD,CAHD,MAGO;UACL;UACAP,OAAO,CAACE,MAAR,CAAe,uBAAf,EAAwCE,QAAxC;QACD;;QACDJ,OAAO,CAACE,MAAR,CAAe,2BAAf,EAA4CN,OAA5C;MACD;IACF;;EAjCM,CAbgB;EAgDzBY,SAAS,EAAE;IACT;IACA;IACA;IACAC,WAAW,CAACpB,KAAD,EAAQC,QAAR,EAAkB;MAC3BD,KAAK,CAACC,QAAN,GAAiBA,QAAjB;IACD,CANQ;;IAOToB,iBAAiB,CAACrB,KAAD,EAAQsB,SAAR,EAAmB;MAClCtB,KAAK,CAACE,IAAN,CAAWqB,IAAX,CAAgB;QACdL,EAAE,EAAEI,SADU;QAEdE,QAAQ,EAAE;MAFI,CAAhB;IAID,CAZQ;;IAcTC,qBAAqB,CAACzB,KAAD,EAAQe,QAAR,EAAkB;MACrCA,QAAQ,CAACS,QAAT;IACD,CAhBQ;;IAkBTE,yBAAyB,CAAC1B,KAAD,EAAQO,OAAR,EAAiB;MACxCA,OAAO,CAACC,SAAR;IACD;;EApBQ;AAhDc,CAAD,CAA1B"},"metadata":{},"sourceType":"module"}