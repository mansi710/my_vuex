{"ast":null,"code":"// import shop from \"@/store/shop\";\nimport store from \"@/store/store\";\nimport \"vuex\";\nexport default {\n  data() {\n    return {\n      // products: [],\n      loading: false,\n      productIndex: 1\n    };\n  },\n\n  // computed: {\n  //   ...mapState({\n  //     products: (state) => state.products.items,\n  //   }),\n  //   ...mapGetters({\n  //     productIsInStock: \"productIsInStock\",\n  //   }),\n  // },\n  computed: {\n    //return the product from the state.\n    products() {\n      // return store.state.products;\n      // for available product to fetch getter\n      // return store.getters.availableProducts;\n      //using getter\n      return this.$store.state.products;\n    },\n\n    productIsInStock() {\n      return this.$store.getters.productIsInStock;\n    }\n\n  },\n  methods: {\n    // ...mapActions({\n    //   fetchProducts: \"fetchProducts\",\n    //   addProductToCart: \"addProductToCart\",\n    // }),\n    addProductToCart(product) {\n      store.dispatch(\"addProductToCart\", product);\n    }\n\n  },\n\n  created() {\n    // shop.getProducts((products) => {\n    //   //   store.state.products = products;\n    //   //commit mutation\n    //   store.commit(\"setProducts\", products);\n    // });\n    this.loading = true; // store.dispatch(\"fetchProducts\").then(() => (this.loading = false));\n\n    this.fetchProducts().then(() => this.loading = false);\n  }\n\n};","map":{"version":3,"mappings":"AAgBA;AACA,OAAOA,KAAP,MAAkB,eAAlB;AACA,OAAsD,MAAtD;AACA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACL;MACAC,OAAO,EAAE,KAFJ;MAGLC,YAAY,EAAE;IAHT,CAAP;EAKD,CAPY;;EASb;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACCC,QAAQ,EAAE;IACT;IACAC,QAAQ,GAAG;MACT;MAEA;MACA;MAEA;MACA,OAAO,KAAKC,MAAL,CAAYC,KAAZ,CAAkBF,QAAzB;IACD,CAVQ;;IAYTG,gBAAgB,GAAG;MACjB,OAAO,KAAKF,MAAL,CAAYG,OAAZ,CAAoBD,gBAA3B;IACD;;EAdQ,CAlBE;EAkCbE,OAAO,EAAE;IACP;IACA;IACA;IACA;IACAC,gBAAgB,CAACC,OAAD,EAAU;MACxBZ,KAAK,CAACa,QAAN,CAAe,kBAAf,EAAmCD,OAAnC;IACD;;EAPM,CAlCI;;EA2CbE,OAAO,GAAG;IACR;IACA;IACA;IACA;IACA;IAEA,KAAKZ,OAAL,GAAe,IAAf,CAPQ,CAQR;;IACA,KAAKa,aAAL,GAAqBC,IAArB,CAA0B,MAAO,KAAKd,OAAL,GAAe,KAAhD;EACD;;AArDY,CAAf","names":["store","data","loading","productIndex","computed","products","$store","state","productIsInStock","getters","methods","addProductToCart","product","dispatch","created","fetchProducts","then"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/vuex/src/components/ProductList.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Product List</h1>\n    <img v-if=\"loading\" src=\"https://i.imgur.com/JfPpwOA.gif\" />\n    <ul v-else>\n      <li v-for=\"product in products\" :key=\"product.name\">\n        {{ product.title }} - {{ product.price }} - {{ product.inventory }}\n        <button :disabled=\"!productIsInStock(product)\" @click=\"addProductToCart(product)\">\n          Add To Cart\n        </button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n// import shop from \"@/store/shop\";\nimport store from \"@/store/store\";\nimport { /**mapState, mapGetters, mapActions*/ } from \"vuex\";\nexport default {\n  data() {\n    return {\n      // products: [],\n      loading: false,\n      productIndex: 1,\n    };\n  },\n\n  // computed: {\n  //   ...mapState({\n  //     products: (state) => state.products.items,\n  //   }),\n\n  //   ...mapGetters({\n  //     productIsInStock: \"productIsInStock\",\n  //   }),\n  // },\n   computed: {\n    //return the product from the state.\n    products() {\n      // return store.state.products;\n\n      // for available product to fetch getter\n      // return store.getters.availableProducts;\n\n      //using getter\n      return this.$store.state.products;\n    },\n\n    productIsInStock() {\n      return this.$store.getters.productIsInStock;\n    },\n  },\n  methods: {\n    // ...mapActions({\n    //   fetchProducts: \"fetchProducts\",\n    //   addProductToCart: \"addProductToCart\",\n    // }),\n    addProductToCart(product) {\n      store.dispatch(\"addProductToCart\", product);\n    },\n  },\n  created() {\n    // shop.getProducts((products) => {\n    //   //   store.state.products = products;\n    //   //commit mutation\n    //   store.commit(\"setProducts\", products);\n    // });\n\n    this.loading = true;\n    // store.dispatch(\"fetchProducts\").then(() => (this.loading = false));\n    this.fetchProducts().then(() => (this.loading = false));\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}