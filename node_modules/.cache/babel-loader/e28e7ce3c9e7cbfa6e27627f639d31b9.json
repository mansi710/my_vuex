{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Product List\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  key: 0,\n  src: \"https://i.imgur.com/JfPpwOA.gif\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = [\"disabled\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $data.loading ? (_openBlock(), _createElementBlock(\"img\", _hoisted_2)) : (_openBlock(), _createElementBlock(\"ul\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.products, product => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: product.name\n    }, [_createTextVNode(_toDisplayString(product.title) + \" - \" + _toDisplayString(product.price) + \" - \" + _toDisplayString(product.inventory) + \" \", 1\n    /* TEXT */\n    ), _createElementVNode(\"button\", {\n      disabled: !_ctx.productIsInStock(product),\n      onClick: $event => $options.addProductToCart(product)\n    }, \" Add To Cart \", 8\n    /* PROPS */\n    , _hoisted_4)]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]))]);\n}","map":{"version":3,"mappings":";;gCAEIA,oBAAqB,IAArB,EAAqB,IAArB,EAAI,cAAJ,EAAgB;AAAA;AAAhB;;;;EACoBC,GAAG,EAAC;;;;;;;uBAF1BC,oBAWM,KAXN,EAWM,IAXN,EAWM,CAVJC,UAUI,EATOC,+BAAXF,oBAA4D,KAA5D,gCACAA,oBAOK,IAPL,EAOKG,UAPL,EAOK,oBANHH,oBAKKI,SALL,EAKK,IALL,EAKKC,YALiBC,aAKjB,EALMC,OAAmB,IAAZ;yBAAlBP,oBAKK,IALL,EAKK;MAL4BQ,GAAG,EAAED,OAAO,CAACE;IAKzC,CALL,qCACKF,OAAO,CAACG,SAAQ,QAAGC,iBAAGJ,OAAO,CAACK,KAAX,IAAmB,QAAGD,iBAAGJ,OAAO,CAACM,SAAX,IAAuB,KACnE;IAAA;OAAAf,oBAES,QAFT,EAES;MAFAgB,QAAQ,GAAGR,sBAAiBC,OAAjB,CAEX;MAFuCQ,OAAK,YAAEC,0BAAiBT,OAAjB;IAE9C,CAFT,EAAkF,eAAlF,EAEA;IAAA;IAFA,EAEAU,UAFA,EAFF;GAKK,CALL;;EAAA,CAMG,EAPL,EAQI,CAXN","names":["_createElementVNode","src","_createElementBlock","_hoisted_1","$data","_hoisted_3","_Fragment","_renderList","_ctx","product","key","name","title","_toDisplayString","price","inventory","disabled","onClick","$options","_hoisted_4"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/vuex/src/components/2Data.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Product List</h1>\n    <img v-if=\"loading\" src=\"https://i.imgur.com/JfPpwOA.gif\" />\n    <ul v-else>\n      <li v-for=\"product in products\" :key=\"product.name\">\n        {{ product.title }} - {{ product.price }} - {{ product.inventory }}\n        <button :disabled=\"!productIsInStock(product)\" @click=\"addProductToCart(product)\">\n          Add To Cart\n        </button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n// import shop from \"@/store/shop\";\n// import store from \"@/store/store\";\nimport { mapState, mapGetters, mapActions } from \"vuex\";\nexport default {\n  data() {\n    return {\n      // products: [],\n      loading: false,\n      productIndex: 1,\n    };\n  },\n\n  computed: {\n    ...mapState({\n      products: (state) => state.products.items,\n    }),\n    ...mapGetters({\n      productIsInStock: \"productIsInStock\",\n    }),\n  },\n\n  //  computed: {\n  //   //return the product from the state.\n  //   products() {\n  //     // return store.state.products;\n\n  //     // for available product to fetch getter\n  //     // return store.getters.availableProducts;\n\n  //     //using getter\n  //     return this.$store.state.products;\n  //   },\n\n  //   productIsInStock() {\n  //     return this.$store.getters.productIsInStock;\n  //   },\n  // },\n  methods: {\n    // ...mapActions({\n    //   fetchProducts: \"fetchProducts\",\n    //   addProductToCart: \"addProductToCart\",\n    // }),\n    addProductToCart(product) {\n      store.dispatch(\"addProductToCart\", product);\n    },\n  },\n  created() {\n    // shop.getProducts((products) => {\n    //   //   store.state.products = products;\n    //   //commit mutation\n    //   store.commit(\"setProducts\", products);\n    // });\n\n    this.loading = true;\n    // store.dispatch(\"fetchProducts\").then(() => (this.loading = false));\n    this.fetchProducts().then(() => (this.loading = false));\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}