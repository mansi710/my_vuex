{"ast":null,"code":"import { reject, resolve } from \"core-js/fn/promise\";\nimport { createStore } from \"vuex\"; // import store from \"./store\";\n\nimport shop from \"./shop\";\nexport default createStore({\n  state: {\n    //like data\n    products: []\n  },\n  getters: {\n    //like computed properties\n    productsCount() {},\n\n    availableProducts(state) {\n      return state.products.filter(product => product.inventory > 0);\n    }\n\n  },\n  actions: {\n    //make the ajax call\n    //run setProducts mutation\n    fetchProducts({\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        shop.getProducts(products => {\n          commit('setProducts', products);\n        });\n      });\n    } // addToCart(context, product) {\n    //   if(product.inventory > 0){\n    //     context.commit('pushProductToCart',product)\n    //   }else{\n    //     //show out of stock\n    //   }\n    // },\n\n\n  },\n  mutations: {\n    //setting and updating state\n    //when state change\n    //and only responsible for updating just a piece of the state.\n    setProducts(state, products) {\n      state.products = products;\n    }\n\n  }\n});","map":{"version":3,"names":["reject","resolve","createStore","shop","state","products","getters","productsCount","availableProducts","filter","product","inventory","actions","fetchProducts","commit","Promise","getProducts","mutations","setProducts"],"sources":["/var/www/html/newData/mansi/vuex/src/store/shoppingcart.js"],"sourcesContent":["import { reject, resolve } from \"core-js/fn/promise\";\nimport { createStore } from \"vuex\";\n// import store from \"./store\";\nimport shop from \"./shop\";\nexport default createStore({\n  state: {\n    //like data\n    products: [],\n  },\n  getters: {\n    //like computed properties\n    productsCount() {},\n    availableProducts(state) {\n      return state.products.filter((product) => product.inventory > 0);\n    },\n  },\n  actions: {\n    //make the ajax call\n    //run setProducts mutation\n    fetchProducts({ commit }) {\n      return new Promise((resolve,reject)=>{\n        shop.getProducts(products=>{\n          commit('setProducts',products)\n        })\n      })\n    },\n\n    // addToCart(context, product) {\n    //   if(product.inventory > 0){\n    //     context.commit('pushProductToCart',product)\n    //   }else{\n    //     //show out of stock\n    //   }\n    // },\n  },\n  mutations: {\n    //setting and updating state\n    //when state change\n    //and only responsible for updating just a piece of the state.\n    setProducts(state, products) {\n      state.products = products;\n    },\n  },\n});\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,oBAAhC;AACA,SAASC,WAAT,QAA4B,MAA5B,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACL;IACAC,QAAQ,EAAE;EAFL,CADkB;EAKzBC,OAAO,EAAE;IACP;IACAC,aAAa,GAAG,CAAE,CAFX;;IAGPC,iBAAiB,CAACJ,KAAD,EAAQ;MACvB,OAAOA,KAAK,CAACC,QAAN,CAAeI,MAAf,CAAuBC,OAAD,IAAaA,OAAO,CAACC,SAAR,GAAoB,CAAvD,CAAP;IACD;;EALM,CALgB;EAYzBC,OAAO,EAAE;IACP;IACA;IACAC,aAAa,CAAC;MAAEC;IAAF,CAAD,EAAa;MACxB,OAAO,IAAIC,OAAJ,CAAY,CAACd,OAAD,EAASD,MAAT,KAAkB;QACnCG,IAAI,CAACa,WAAL,CAAiBX,QAAQ,IAAE;UACzBS,MAAM,CAAC,aAAD,EAAeT,QAAf,CAAN;QACD,CAFD;MAGD,CAJM,CAAP;IAKD,CATM,CAWP;IACA;IACA;IACA;IACA;IACA;IACA;;;EAjBO,CAZgB;EA+BzBY,SAAS,EAAE;IACT;IACA;IACA;IACAC,WAAW,CAACd,KAAD,EAAQC,QAAR,EAAkB;MAC3BD,KAAK,CAACC,QAAN,GAAiBA,QAAjB;IACD;;EANQ;AA/Bc,CAAD,CAA1B"},"metadata":{},"sourceType":"module"}